---
replicaCount: 1

buildkite:
  # buildkite.backend -- The name of the backend to use (e.g. cloudwatch, statsd, prometheus or stackdriver).
  backend: "prometheus"
  # buildkite.queue -- A comma separated list of Buildkite queues to process (e.g. backend-deploy,ui-deploy). All queues are published if no queue is specified.
  queue: ""
  # buildkite.quiet -- A boolean specifying that only ERROR log lines must be printed. (e.g. 1, true).
  quiet: "false"
  # buildkite.interval -- A second
  interval: "30s"
  # buildkite.cloudwatchDimension -- A comma separated list in the form of Key=Value, Other=Value containing the Cloudwatch dimensions to index metrics under.
  cloudwatchDimensions: ""
  # buildkite.token -- The Buildkite agent API token to use.
  token: ""
  # buildkite.stackdriverProjectId -- The target project ID to write Stackdriver metrics to, used when backend is set to "stackdriver"
  stackdriverProjectId: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

readinessProbe:
  httpGet:
    path: /metrics
    port: 8080

livenessProbe:
  httpGet:
    path: /metrics
    port: 8080
  initialDelaySeconds: 30
  failureThreshold: 10

image:
  repository: seanson/buildkite-metrics-agent
  tag: v5.2.0
  pullPolicy: Always

service:
  enabled: false
  type: ClusterIP
  ## Provide optional annotations to the service i.e. for external-dns
  # annotations:
  ##   external-dns.alpha.kubernetes.io/hostname: yourservicename.k8s.yourcompany.com
  ##
  port: 80
  targetport: 8080

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

# Enable if using PrometheusOperator
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics

nodeSelector: {}

tolerations: []

affinity: {}
